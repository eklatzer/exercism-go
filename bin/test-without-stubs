#!/bin/bash

# This test suite:
# (1) moves all go files (and modules) into a tmp directory,
# (2) overwrites the stub with the exemplar solution
# (3) runs the various linters
# (4) runs the tests
# (5) then deletes the tmp directory.

# We use this instead of build constraints to have less noise in stub files.
# Newcomers to go might be confused by build constraints

# We copy everything into a test directory rather than doing this in the actual
# directories to simplify cleanup and make it far less likely that we will
# accidentally commit an unintended change to the source files.
# One downside to this is that the errors generated reference the temporary
# file locations rather than the real ones, but we deemed this cost acceptable.

root=$(pwd)
tmp=tmp/lint
rm -rf "$tmp"
mkdir -p "$tmp"

for parentdir in concept practice; do
  for dir in exercises/$parentdir/*/; do
    stub=$(echo $(basename $dir) | tr - _)
    if [ -f "${dir}.meta/.skip_tests" ]; then
      continue
    fi
    exemplar="${dir}.meta/exemplar.go"
    if [ ! -f $exemplar ]; then
      exemplar="${dir}.meta/example.go"
    fi
    if [ ! -f $exemplar ]; then
      echo "Missing examplar in ${dir}.meta called exemplar.go or example.go"
      exit 1
    fi
    mod="${dir}go.mod"
    if [ ! -f $mod ]; then
      echo "Please add a basic go module at $mod, like this:"
      cat << EOD
module $stub

go 1.15
EOD
      exit 1
    fi

    if [ -f "${dir}${stub}.go" ] ; then
      tmpstub=$tmp/$parentdir/$stub
      mkdir -p $tmpstub
      echo "copy base files and tests to $tmpstub"
      cp $dir/*.go $tmpstub
      echo "copy exemplar $exemplar to $tmpstub"
      cp $exemplar "${tmpstub}/${stub}.go"
      echo "copy module $mod to $tmpstub"
      cp $mod $tmpstub

      generator="${dir}/.meta/gen.go"
      if [ -f "${generator}" ]; then
        echo "copy generator ${generator}"
        mkdir -p "${tmp}/gen/${stub}" && cp "${generator}" "${tmp}/gen/${stub}/gen.go"
      fi

      echo "put everything in the same module"
      original_module=`head -n1 $tmpstub/go.mod | awk '{ print $2 }'`
      sed -i'.bak' "s|package .*|package ${stub}|" $tmpstub/*.go
      sed -i'.bak' "s|// Package ${original_module}|// Package ${stub}|" $tmpstub/*.go
      sed -i'.bak' "s|module .*|module ${stub}|" $tmpstub/go.mod
    else
      echo "${dir}${stub}.go not found: expected a file ${dir}${stub}.go since the exercise is in a folder named $stub"
      exit 1
    fi
  done
done

cleanup () {
  echo "deleting ${tmp}"
  # the cd for go fmt or go vet could leave us in an unexpected place.
  # cd to a known place.
  cd "$root"

  rm -rf $tmp
}

trap cleanup EXIT INT TERM

# Since Go 1.16 all go commands run in module-aware mode,
# which would require a go.mod file to be present at the root
# of the project.
# Setting GO111MODULE to 'auto' makes the go commands run in
# module-aware mode only in places where a go.mod is present.
export GO111MODULE=auto

# Run lint which is configured by .golangci.yml at the root of the repo
# and if it's successful, run tests
bin/golangci-lint run ./$tmp/... && go test -cpu 2 ./$tmp/...

exitcode=$?

if [ $exitcode -ne 0 ]
  then 
    echo "LINTER/TESTS FAILED for exercises or exercise generators"
    exit $exitcode
fi

paths_to_lint="gomod-sync gen"
for path in $paths_to_lint; do
  cd "$root"
  cd "$path"
  $root/bin/golangci-lint run && go test -cpu 2

  exitcode=$?
  if [ $exitcode -ne 0 ]
    then 
      echo "LINTER/TESTS FAILED for $path"
      exit $exitcode
  fi
done
